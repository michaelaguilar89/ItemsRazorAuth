@page "/products"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using SharedProyect.Dto
@inject ItemsBlazorAuthApp.Service.ProductService Service
@using SharedProyect.Models



<div class="container">
    <div class="row">
        <div class="col-lg-12 mx-auto" style="background-color:whitesmoke">
            @if (ErrorMessage!=null)
            {
                <h3>Error Messages: @ErrorMessage</h3>
            }

            @if(list==null){
            <p><em>Loading...</em></p>
            }else
            {
               <h3 class="text-primary text-center">
                List Of Products
                <a href="/products/create" class="btn btn-primary py-3">New</a>
               
               </h3>
           

            <div class="col-lg-8 mx-auto">
                <form method="get">
                    <p>
                        Find by name:
                        <input type="text" name="search" value="@search" placeholder="Search Data ..." />
                        <button type="submit" class="btn btn-primary">Search</button> |
                        <a href="/products">Back to full List</a>
                    </p>
                </form>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Creation Date</th>
                        <th>User</th>
                        <th>Comments</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in list)
                    {
                        <tr>
                            <td>
                                <button class="btn btn-link" @onclick="(()=>Details(item.Id))">@item.Name</button>    
                            </td>
                            <td>@item.Description</td>
                            <td>@item.Quantity</td>
                            <td>@item.Price</td>
                            <td>@item.CreationDate</td>
                            <td>@item.UserName</td>
                            <td>@item.Comments</td>
                            <td>
                                <button class="btn btn-success my-1" @onclick="(()=>Edit(item.Id))">Edit</button>
                                <button class="btn btn-danger" @onclick="(()=>Delete(item.Id))" >Delete</button>
                               
                            </td>
                        </tr>
                    }
                </tbody>
            </table>      
            }
        </div>
    </div>
</div>
            
            
            

@code {
    private List<ProductDto> list = new();

    [SupplyParameterFromQuery(Name = "search")]
    public string search { get; set; }

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private void Edit(int id)
    {
        Navigation.NavigateTo($"/products/edit/{id}");
    }
    private void Details(int id)
    {
        int action = 0;
        Navigation.NavigateTo($"/products/details/{id}/{action}");
        //  Navigation.NavigateTo("/products/details");
    }
    private void Delete(int id)
    {
        int action = 1;
        Navigation.NavigateTo($"/products/details/{id}/{action}");
    }
    private async Task LoadProducts()
    {
        try
        {
            list = await Service.Get(search);
            list.AsQueryable();

            if (list == null)
            {
                ErrorMessage = "No products found, try again later.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }
}

